As soon as Node.js project will use a database, an object storage or an external API,there  will be need to store some credentials.Those credentials, like usernames, passwords or tokens, are called secrets and we have to keep them obviously secrets.

                                           Solutions
1) Enviroment Variables: One solution, adopted massively by the industry, is to keep these secrets in environment variables. Which hvae the access to developer only on his machine and are not uploaded to the github using gitignore file where we add .env extended files to be ignored while commiting.

2) Using Seceret Manager Nodejs Client: The secerts are stored on google cloud using nodejs and the configuration is as follows:

Installing the client library:
npm install @google-cloud/secret-manager


Using the client library
          `// Import the Secret Manager client and instantiate it:
          const {SecretManagerServiceClient} = require('@google-cloud/secret-manager');
          const client = new SecretManagerServiceClient();

          /**
           * TODO(developer): Uncomment these variables before running the sample.
           */
          // parent = 'projects/my-project', // Project for which to manage secrets.
          // secretId = 'foo', // Secret ID.
          // payload = 'hello world!' // String source data.

          async function createAndAccessSecret() {
            // Create the secret with automation replication.
            const [secret] = await client.createSecret({
              parent: parent,
              secret: {
                name: secretId,
                replication: {
                  automatic: {},
                },
              },
              secretId,
            });

            console.info(`Created secret ${secret.name}`);

            // Add a version with a payload onto the secret.
            const [version] = await client.addSecretVersion({
              parent: secret.name,
              payload: {
                data: Buffer.from(payload, 'utf8'),
              },
            });

            console.info(`Added secret version ${version.name}`);

            // Access the secret.
            const [accessResponse] = await client.accessSecretVersion({
              name: version.name,
            });

            const responsePayload = accessResponse.payload.data.toString('utf8');
            console.info(`Payload: ${responsePayload}`);
          }
          createAndAccessSecret();`



3) HashiCorp Valut: Vault is HashiCorp’s open-source product for managing secrets and sensitive data. 
Features: 
-> Built-in concept of low trust and enforcement of security by identity
-> Encryption at rest
-> Several ways to authenticate against Vault, e.g., tokens, LDAP, AppRole, etc.
-> Lots of secret backends, each catering to specific needs, including key-value store, Active Directory, etc.
-> Support for multiple storage backends for high availability, e.g., databases (MySQL, Postgres), object stores (GCS, S3), HashiCorp’s Consul, etc.


