Performance
Matplotlib provides multiple ways to greatly reduce rendering time at the cost of a slight change (to a settable tolerance) in your plot's appearance. 

Following methods are available to reduce rendering time.

-> Line segment simplification

For plots that have line segments e.g. line plots, rendering performance can be controlled by rcParams["path.simplify"] (default: True) and rcParams["path.simplify_threshold"] (default: 0.111111111111), which can be defined in the matplotlibrc file.

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Setup, and create the data to plot
y = np.random.rand(100000)
y[50000:] *= 2
y[np.geomspace(10, 50000, 400).astype(int)] = -1
mpl.rcParams['path.simplify'] = True

mpl.rcParams['path.simplify_threshold'] = 1.0
plt.plot(y)
plt.show()

Matplotlib currently defaults to a conservative simplification threshold of 1/9. To change default settings to use a different value, change the matplotlibrc file. 

-> Marker subsampling
Markers can also be simplified. Marker subsampling is only available to Line2D objects through the markevery property. 

plt.plot(x, y, markevery=10)
The markevery argument allows for subsampling.

-> Splitting lines into smaller chunks
This allows users to specify a chunk size, and any lines with greater than that many vertices will be split into multiple lines.

The following script will display the data with a chunk size of 10,000. The difference can be seen when the figures are larger.

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['path.simplify_threshold'] = 1.0

# Setup, and create the data to plot
y = np.random.rand(100000)
y[50000:] *= 2
y[np.geomspace(10, 50000, 400).astype(int)] = -1
mpl.rcParams['path.simplify'] = True

mpl.rcParams['agg.path.chunksize'] = 10000
plt.plot(y)
plt.show()


->Legends
The default legend for axes finds the location that covers the fewest data points (loc='best'). This can be a very expensive if the data is large. In this case, a specific location helps improve performance.


-> Fast Style
The fast style can be used to set simplification and chunking parameters to reasonable settings to speed up plotting large data.

import matplotlib.style as mplstyle
mplstyle.use('fast')
mplstyle.use(['dark_background', 'ggplot', 'fast'])
