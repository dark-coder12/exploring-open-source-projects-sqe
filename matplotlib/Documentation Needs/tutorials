Matplotlib's official documentation site supports full fledged tutorials, and even has a separate section for that. 

This is achieved through various sections, all focusing on different difficulty levels.

Section Navigation:

Introductory
Intermediate
Advanced
Colors
Provisional
Text
Toolkits

Matplotlib holds quick tutorials in the form of reading material heavily guided with figures and coding. Introductory tutorials are usually 5 minute reads, while the rest are a little lengthier. Code snippets are kept short to medium and the figures are highly elaborate. Since Matplotlib focuses on data visualization, most of it's features are directly oriented with 2D and 3D visualization and models such as various plots are graphs. Thus the tutorials mainly focus on such objects too. 

Such tutorials demand a good grasp on python code and probability / statistics along with set documentation standards that are followed in each separate section. Technical jargon, to the point explanation and running examples are required.

Example Scenario.

A png file has been attached to show what kind of tutorials Matplotlib hosts. The first and easiest tutorial refers to pyplots and their creation. This scenario involves a good conceptual explanation, a code snippet, discussion about parameters as well as an image. All images in the documentation are generated by Sphinx.

Intro to pyplot

matplotlib.pyplot is a collection of functions that make matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc.

In matplotlib.pyplot various states are preserved across function calls, so that it keeps track of things like the current figure and plotting area, and the plotting functions are directed to the current axes (please note that "axes" here and in most places in the documentation refers to the axes part of a figure and not the strict mathematical term for more than one axis).

Generating visualizations with pyplot is very quick:

import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4])
plt.ylabel('some numbers')
plt.show()
pyplot

plot is a versatile function, and will take an arbitrary number of arguments. For example, to plot x versus y, you can write:

plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
